{"version":3,"sources":["images/borat.png","images/gwbush.png","images/vs.png","components/WelcomeScreen.jsx","components/Projectile.jsx","components/MovingItem.jsx","components/Enemy.jsx","components/GameGrid.jsx","components/LifeCounter.jsx","components/KillCounter.jsx","components/WaveCounter.jsx","images/borat-nice.png","images/youlose.png","components/EndScreen.jsx","components/App.js","js/EnemyPrototypes.js","js/Constants.js","components/Store.js","components/AppReducer.jsx","index.js"],"names":["WelcomeScreen","props","dispatch","useDispatch","className","src","boratImage","vsImage","gwbushImage","name","onClick","e","type","payload","Projectile","currentProjectile","useSelector","state","projectiles","find","projectile","id","inputRef","useRef","useEffect","dead","current","y","setTimeout","parseInt","toString","timeOfDeath","Date","now","style","top","left","x","ref","MovingItem","focus","storePosition","boratPosition","storeProjectiles","useState","timeOfLastFire","setTimeOfLastFire","length","map","Math","abs","tabIndex","onKeyDown","key","preventDefault","Enemy","waveNumber","waveCount","currentEnemy","enemies","isItDead","health","enemyType","attacksFromADistance","slice","speed","GameGrid","reactElementArrayEnemies","enemy","console","log","reactElementArrayProjectiles","LifeCounter","storeLifeCount","lifeCount","class","KillCounter","storeKillCount","killCount","WaveCounter","storeWaveCount","EndScreen","youLoseImage","App","gameStarted","enemyCount","nbOfWaves","enemyPrototypes","initialState","GWBushPosition","store","createStore","action","produce","draft","position","positionY","push","positionX","amount","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a87078d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/borat.b6c7fdb6.png\";","export default __webpack_public_path__ + \"static/media/gwbush.b1a35170.png\";","export default __webpack_public_path__ + \"static/media/vs.93f0f250.png\";","import { useDispatch } from 'react-redux'\r\nimport '../styles/welcomeScreen.scss'\r\nimport boratImage from '../images/borat.png'\r\nimport gwbushImage from '../images/gwbush.png'\r\nimport vsImage from '../images/vs.png'\r\n\r\nconst WelcomeScreen = (props) => {\r\n    const dispatch = useDispatch()\r\n    return <div className = \"welcome-screen\">\r\n        <img  className = \"welcome-screen__logo\" src = {boratImage}/>\r\n        <img  className = \"welcome-screen__logo\" src = {vsImage}/>\r\n        <img  className = \"welcome-screen__logo\" src = {gwbushImage}/>\r\n        <span className = \"welcome-screen__text\">Earth is under attack! A swarm of space Georges W. Bushes is trying to take over our planet! You are Borat and you were given a spaceship equiped with space rockets, made in Kazakhstan of course, the greatest nation in the world</span>\r\n        <span className = \"welcome-screen__text\">To move, use keyboard arrows <button className = \"welcome-screen__button-demo\">{'<'}</button> and <button className = \"welcome-screen__button-demo\">{'>'}</button></span>\r\n        <span className = \"welcome-screen__text\">To shoot, use the <button className = \"welcome-screen__button-demo\">{'SPACE'}</button> key!</span>\r\n        <span className = \"welcome-screen__text\">If you can save us all, it's nice. I liiiiiike!</span>\r\n        <button name=\"button\" className = \"welcome-screen__button-start\" onClick = {(e) => {\r\n            dispatch({ type: 'gameStarted/setValue', payload: true})\r\n        }}>SAVE THE EARTH!</button>\r\n    </div>\r\n}\r\n\r\nexport default WelcomeScreen","//Import SCSS stylesheet.\r\nimport '../styles/projectile.scss'\r\n\r\n//Importing redux specific hooks\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n//importing useEffect to handle behavior after render.\r\nimport { useEffect } from 'react'\r\n//importing useRef to be able to assign a ref to the element.\r\nimport {useRef} from 'react'\r\n\r\n\r\nconst Projectile= (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // Get current projectile from the store.\r\n    const storeProjectile = state => state.projectiles.find(projectile => projectile.id == props.id);\r\n    const currentProjectile = useSelector(storeProjectile)\r\n\r\n    // Creating the reference we'll assign to the projectile\r\n    // This will allow us to reassign the classname to the component in useEffect\r\n    const inputRef = useRef();\r\n\r\n    useEffect(() => {\r\n        //If the projectile not dead, do some stuff\r\n        if (currentProjectile.dead !== true) {\r\n            //we assign the className value from the state.\r\n            inputRef.current.className = \"projectile--\"+currentProjectile.type\r\n            //If current projectile Y position is within the grid limits\r\n            if (currentProjectile.y <= 100 && currentProjectile.y >= 0 ) {\r\n                //We make the projectile move, to the bottom or the top of the screen depending on the type of projectile.\r\n                if (currentProjectile.type === \"player\") {\r\n                        setTimeout(() => {\r\n                        dispatch({ type: 'projectile/elevate', payload: {'positionY': (parseInt(currentProjectile.y) - 10).toString(),  'id': props.id }})\r\n                        }\r\n                        , 50)\r\n                } else {\r\n                    if (currentProjectile.type === \"enemy\") {\r\n                        setTimeout(() => {\r\n                        dispatch({ type: 'projectile/elevate', payload: {'positionY': (parseInt(currentProjectile.y) + 10).toString(), 'id': props.id }})\r\n                        }, 300)\r\n                    }\r\n                }\r\n            } else {\r\n                //If the projectile is out of bounds, it is set to dead.\r\n                dispatch({ type: 'projectile/setDead', payload: {'dead': true, 'id': currentProjectile.id }})\r\n            }    \r\n        }\r\n        else if (currentProjectile.dead === true && currentProjectile.timeOfDeath === null) {\r\n            /*We give it the dead class*/\r\n            inputRef.current.className = \"projectile--\"+currentProjectile.type+\" projectile--\"+currentProjectile.type+'--dead' \r\n            /* We set time of death. Whenever the projectile has been dead more than 1 second,\r\n            we'll stop rendering it on the grid (see GameGrid.jsx).*/\r\n            dispatch( {'type': 'projectile/setTimeOfDeath', payload: {'id': props.id , 'timeOfDeath' : Date.now()}})\r\n        }\r\n        \r\n    })\r\n    //We assign a ref to the projectile\r\n      return (\r\n            <div className = {\"projectile--\"+currentProjectile.type} style = {{top:currentProjectile.y + \"vh\", left: currentProjectile.x + \"vh\"}} ref={inputRef}></div> \r\n      )\r\n    }\r\n\r\n   \r\nexport default Projectile","import '../styles/fancySquare.scss'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useRef, useEffect, useState } from 'react';\r\nimport Projectile from './Projectile';\r\n\r\nconst MovingItem = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    //Creating the reference we'll assign to the Saucer\r\n    const inputRef = useRef();\r\n\r\n    //Adding behavior on render: give focus to the Saucer\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n      })\r\n\r\n    //Setting Hook on global state position for this object\r\n    const currentPosition = state => state.boratPosition;\r\n    const storePosition = useSelector(currentPosition)\r\n\r\n    const currentProjectilesPositions = state => state.projectiles;\r\n    const storeProjectiles = useSelector(currentProjectilesPositions)\r\n\r\n    //checking the last time the player fired a projectile\r\n    const [timeOfLastFire , setTimeOfLastFire] = useState(Date.now())\r\n\r\n    //handling position changing scenarios in a function\r\n\r\n    const moveAround = (key) => {\r\n        \r\n        if (key === \"ArrowLeft\") {\r\n            if (storePosition.x >= 2) {\r\n                 dispatch({type: 'borat/putXPosition', payload: parseInt(storePosition.x)-5}\r\n                 \r\n                )}\r\n        } else if (key === \"ArrowRight\" ) {\r\n            if (storePosition.x <=92) {\r\n                dispatch({type: 'borat/putXPosition', payload: parseInt(storePosition.x)+5}\r\n                )}\r\n            }\r\n            if (key === \" \" && (Date.now() - timeOfLastFire) > 200) {\r\n                dispatch({ type: 'projectile/spawn', payload: {'positionX' : parseInt(storePosition.x), 'positionY' : parseInt(storePosition.y), 'type' : \"player\"}})\r\n                setTimeOfLastFire(Date.now())\r\n            }\r\n        }\r\n    //If there are projectiles in the store, we check if they collide with the player and if they can hurt us.\r\n    if (storeProjectiles.length > 0) {\r\n            storeProjectiles.map(projectile => {\r\n                if (projectile.dead === false && projectile.type === \"enemy\" && (Math.abs(projectile.x - storePosition.x) <=5) && (Math.abs(projectile.y - storePosition.y)<=5)) {\r\n                    //We decrease the player's lifeCount, and kill the projectile\r\n                    dispatch({ type: 'projectile/setDead', payload: {'dead': true, 'id': projectile.id }})\r\n                    dispatch({ type: 'lifeCount/decrease', payload: true})        \r\n                } \r\n            })\r\n            }\r\n\r\n        \r\n\r\n    //Returning the player \r\n    return <div tabIndex = '0' className = \"fancy-square\" style = {{top:storePosition.y + \"vh\", left: storePosition.x + \"vh\"}} onKeyDown = { e => {\r\n            e.preventDefault();\r\n            moveAround(e.key);\r\n        }}  ref={inputRef}></div>\r\n}\r\nexport default MovingItem","import '../styles/enemy.scss'\r\n\r\n//Importing redux specific hooks\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n//importing useEffect to handle behavior after render.\r\nimport { useEffect } from 'react'\r\n//Importing useState for local states.\r\nimport {useState} from 'react'\r\n//Importing useRef to be able to assign references to elements to access them in useEffect\r\nimport {useRef} from 'react'\r\n\r\n\r\nconst Enemy = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // Setting Hook on global state position for the Projectiles\r\n    const currentProjectilesPositions = state => state.projectiles;\r\n    const storeProjectiles = useSelector(currentProjectilesPositions)\r\n\r\n    // Getting current wave number from the store.\r\n    const storeWaveNumber = state => state.waveCount;\r\n    const waveNumber = useSelector(storeWaveNumber)\r\n\r\n    // Get the Current Enemy from the store\r\n    const storeEnemy = state => state.enemies[waveNumber][props.id];\r\n    const currentEnemy = useSelector(storeEnemy)\r\n\r\n    // Get the Death Status for current enemy from the store\r\n    const storeIsItDead = state => state.enemies[waveNumber][props.id].dead;\r\n    const isItDead = useSelector(storeIsItDead)\r\n\r\n    // Get the enemy LifeCount from the store\r\n    const storeHealth = state => state.enemies[waveNumber][props.id].enemyType.health;\r\n    const health = useSelector(storeHealth)\r\n\r\n    // A constant holding the timestamp of the last time the enemy fired.\r\n    const [timeOfLastFire , setTimeOfLastFire] = useState(Date.now())\r\n\r\n    //Creating the reference we'll assign to the enemy\r\n    const inputRef = useRef();\r\n\r\n    useEffect(() => {\r\n        /*On render*/\r\n        /* Check if the enemy has O lives, and is not yet marked as dead*/\r\n        if (health === 0 && isItDead === false) {\r\n            //Mark the current enemy as dead in the store. Also increase killcount by one. \r\n            dispatch({ type: 'killCount/add', payload: 1})\r\n            dispatch({ type: 'enemy/setDead', payload: {'waveNumber': waveNumber, 'dead': true, 'id': props.id }})\r\n        }\r\n\r\n        /*If the enemy is marked as Dead, we change its class so it displays as dead*/\r\n        if (isItDead === true) {\r\n            inputRef.current.className = \"enemy enemy--dead\"\r\n        } else {\r\n            //If the enemy is of the shooting type and the last time it fired was more than 4 seconds ago, we fire. \r\n            if (currentEnemy.enemyType.attacksFromADistance === true && Date.now() - timeOfLastFire > 4000)  {\r\n                dispatch({ type: 'projectile/spawn', payload: {'positionX' : parseInt(currentEnemy.x), 'positionY' : parseInt(currentEnemy.y), 'type' : \"enemy\"}})\r\n                setTimeOfLastFire(Date.now())\r\n            }\r\n\r\n        //If there are projectiles active...\r\n            if (storeProjectiles.length > 0) {\r\n            storeProjectiles.slice(-10).map(projectile => {\r\n                //We check if we are colliding with one of them, of the right type.\r\n                if (projectile.dead === false && projectile.type === \"player\" && (Math.abs(projectile.x - currentEnemy.x) <=5) && (Math.abs(projectile.y - currentEnemy.y)<=5)) {\r\n                    //If we are, then we set the projectile to dead, and decrease the health of the enemy\r\n                    dispatch({ type: 'projectile/setDead', payload: {'dead': true, 'id': projectile.id }})\r\n                    dispatch({ type: 'enemy/decreaseHealth', payload: {'waveNumber': waveNumber, 'amount': 1, 'id': props.id }})  \r\n                } else  {\r\n                    //If we are not colliding, assign the display class to the enemy for normal display. \r\n                    inputRef.current.className = \"enemy enemy--\"+currentEnemy.enemyType.className\r\n                }\r\n            })\r\n            }\r\n        //If the enemy did not reach the boudary yet (upper or lower depending its type)\r\n        if (currentEnemy.y < 100 || currentEnemy.y <= 0) {\r\n            //We dispatch a new position for the enemy every 100ms to make it move\r\n            setTimeout(() => \r\n            dispatch({ type: 'enemy/descend', payload: \r\n            {'waveNumber': waveNumber, 'position': (parseInt(currentEnemy.y)+1*currentEnemy.enemyType.speed).toString(), 'id': props.id }})\r\n            , 100)\r\n\r\n        //If the enemy reached the boudary, we decrease the player lifecount, increase killcount and kill the enenmy. \r\n        } else {\r\n            dispatch({ type: 'lifeCount/decrease', payload: true})\r\n            dispatch({ type: 'killCount/add', payload: 1})\r\n            dispatch({ type: 'enemy/setDead', payload: {'waveNumber': waveNumber, 'dead': true, 'id': props.id }})\r\n        }\r\n      }\r\n    })\r\n\r\n      return (\r\n            <div className = {\"enemy enemy--\"+currentEnemy.enemyType.className} style = {{top:currentEnemy.y + \"vh\", left: currentEnemy.x + \"vh\"}} ref={inputRef}></div> \r\n      )\r\n    }\r\n\r\n   \r\nexport default Enemy","import MovingItem from './MovingItem';\r\nimport Enemy from './Enemy';\r\nimport { useSelector } from 'react-redux';\r\nimport Projectile from './Projectile';\r\n\r\n\r\n\r\nconst GameGrid = () => {\r\n\r\n    const storeWaveNumber = state => state.waveCount;\r\n    const waveNumber = useSelector(storeWaveNumber)\r\n\r\n    const storeEnemies = state => state.enemies;\r\n    const enemies = useSelector(storeEnemies)\r\n\r\n    const storeProjectiles = state => state.projectiles;\r\n    const projectiles = useSelector(storeProjectiles)\r\n\r\n    const reactElementArrayEnemies = enemies[waveNumber].map(enemy => {\r\n    return <Enemy id = {enemy.id}/>\r\n    })\r\n\r\n    console.log(projectiles)\r\n\r\n    let reactElementArrayProjectiles = [];\r\n\r\n    if (projectiles.length > 0) {\r\n        reactElementArrayProjectiles = projectiles.map(projectile => {\r\n            if (Date.now() - projectile.timeOfDeath < 1000 || projectile.timeOfDeath === null) {\r\n                return <Projectile id = {projectile.id}/>\r\n            }\r\n          })\r\n\r\n    }    \r\n\r\n    return(\r\n          <div className = \"grid\" >\r\n            <MovingItem/>\r\n                {reactElementArrayEnemies}\r\n                {reactElementArrayProjectiles}\r\n          </div>\r\n\r\n      )\r\n}\r\nexport default GameGrid","import '../styles/lifeCounter.scss'\r\nimport { useSelector } from \"react-redux\"\r\n\r\nconst LifeCounter = () => {\r\n\r\n        //Setting Hook on life counter\r\n        const lifeCount = state => state.lifeCount;\r\n        const storeLifeCount = useSelector(lifeCount)\r\n\r\n    \r\n    if (storeLifeCount > 0) {\r\n        return <div className = \"life-counter\">\r\n            <i class=\"fas fa-heart life-counter__icon\"></i>\r\n            <div className = \"life-counter__value\">{storeLifeCount}</div>\r\n        </div>\r\n    } else {\r\n        return <div className = \"life-counter\">Game Over Man!</div>\r\n    }\r\n}\r\nexport default LifeCounter","import '../styles/lifeCounter.scss'\r\nimport { useSelector } from \"react-redux\"\r\n\r\nconst KillCounter = () => {\r\n\r\n        //Setting Hook on life counter\r\n        const killCount = state => state.killCount;\r\n        const storeKillCount = useSelector(killCount)\r\n\r\n    \r\n    if (storeKillCount < 10) {\r\n        return <div className = \"life-counter\">\r\n            <i class=\"fas fa-skull life-counter__icon\"></i>\r\n            <div className = \"life-counter__value\">{storeKillCount}</div>\r\n        </div>\r\n    } else {\r\n        return <div className = \"life-counter\">They are all dead!</div>\r\n    }\r\n}\r\nexport default KillCounter","import '../styles/lifeCounter.scss'\r\nimport { useSelector } from \"react-redux\"\r\n\r\nconst WaveCounter = () => {\r\n\r\n        //Setting Hook on life counter\r\n        const waveCount = state => state.waveCount;\r\n        const storeWaveCount = useSelector(waveCount)\r\n\r\n    \r\n    if (storeWaveCount < 10) {\r\n        return <div className = \"life-counter\">\r\n            <i class=\"fas fa-skull life-counter__icon\"></i>\r\n            <div className = \"life-counter__value\">{storeWaveCount}</div>\r\n        </div>\r\n    } else {\r\n        return <div className = \"life-counter\">They are all dead!</div>\r\n    }\r\n}\r\nexport default WaveCounter","export default __webpack_public_path__ + \"static/media/borat-nice.2dcc8014.png\";","export default __webpack_public_path__ + \"static/media/youlose.65e4e62e.png\";","import { useSelector } from 'react-redux'\r\nimport '../styles/welcomeScreen.scss'\r\nimport boratImage from '../images/borat-nice.png'\r\nimport youLoseImage from '../images/youlose.png'\r\n\r\n\r\nconst EndScreen = (props) => {\r\n\r\n    const storeLifeCount = state => state.lifeCount;\r\n    const lifeCount = useSelector(storeLifeCount);\r\n\r\n    if (lifeCount > 0) {\r\n        return <div className = \"welcome-screen\">\r\n            <img  className = \"welcome-screen__logo welcome-screen__logo--big\" src = {boratImage}/>\r\n            <span className = \"welcome-screen__text\">WOW Dude. You saved the earth. Now humans can kill each other in peace and harmony</span>\r\n\r\n        </div>\r\n    }\r\n    else {\r\n        return <div className = \"welcome-screen\">\r\n            <img  className = \"welcome-screen__logo welcome-screen__logo--big\" src = {youLoseImage}/>\r\n            <span className = \"welcome-screen__text\">WOW Dude. You suck. Everyone's dead now. Children and everything. Also, it's your fault</span>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default EndScreen","import React, { useState } from 'react';\nimport '../styles/App.css';\nimport '../styles/base.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WelcomeScreen from './WelcomeScreen';\nimport GameGrid from './GameGrid';\nimport LifeCounter from './LifeCounter';\nimport KillCounter from './KillCounter';\nimport WaveCounter from './WaveCounter';\nimport EndScreen from './EndScreen';\n\nfunction App() {\n\n        const storeGameStarted = state => state.gameStarted;\n        const gameStarted = useSelector(storeGameStarted)\n\n        const storeKillCount = state => state.killCount;\n        const killCount = useSelector(storeKillCount)\n\n        const storeLifeCount = state => state.lifeCount;\n        const lifeCount = useSelector(storeLifeCount)\n\n        const storeWaveCount = state => state.waveCount;\n        const waveCount = useSelector(storeWaveCount)\n\n        const storeEnemyCount = state => state.enemies[waveCount].length;\n        const enemyCount = useSelector(storeEnemyCount)\n\n        const storeNbOfWaves = state => state.enemies.length;\n        const nbOfWaves = useSelector(storeNbOfWaves)\n\n        const dispatch = useDispatch()\n\n        if (gameStarted === true) {\n          if (killCount === enemyCount) {\n            /*dispatch({ type: 'gameStarted/setValue', payload: false})*/\n            if (waveCount != (nbOfWaves - 1)) {\n            dispatch({ type: 'wave/add', payload: 1 })  \n            dispatch({ type: 'killCount/add', payload: -10})\n            }\n          }\n\n          if (waveCount != nbOfWaves -1 && lifeCount > 0 ) {\n          return(\n            <div className = \"screen\">\n              <div className = \"counters\">\n              <LifeCounter/>\n              <KillCounter/>\n              <WaveCounter/>\n            </div>\n            <GameGrid/>\n            </div>\n          )\n          } else {\n            return(\n              <div className= \"screen\">\n                <EndScreen/>\n              </div>\n            )\n          }\n        }\n        else {\n          return(\n            <div className= \"screen\">\n              <WelcomeScreen/>\n            </div>\n          )\n        }\n}\n\nexport default App;\n","//This exports a single function taking enemyType (string) as a parameter and returning an enemyTypeObject\r\n//Thils will be used to define the prorperties of each enemy in constants.js\r\n\r\nexport const enemyPrototypes = (enemyType) => {\r\n    switch (enemyType) {\r\n        /*Standard enemy. Just descends slowly*/\r\n        case 'regular':\r\n            return (\r\n                {   'size': 5,\r\n                    'speed': 1,\r\n                    'health': 1, \r\n                    'className': \"regular\",\r\n                    'attacksFromADistance': false\r\n                }\r\n            )\r\n            case 'fast':\r\n            /*As strong, but twice as fast */\r\n            return (\r\n                {   'size': 5,\r\n                    'speed': 2,\r\n                    'health': 1, \r\n                    'className': \"fast\",\r\n                    'attacksFromADistance': false\r\n                }\r\n            )\r\n            case 'heavy':\r\n            //Normal speed, triple health//\r\n            return (\r\n                {   'size': 5,\r\n                    'speed': 1,\r\n                    'health': 3, \r\n                    'className': \"heavy\",\r\n                    'attacksFromADistance': false\r\n                }\r\n            )\r\n            case 'shooter':\r\n            //Can shoot projectiles!\r\n            return (\r\n                {   'size': 5,\r\n                    'speed': 1,\r\n                    'health': 1, \r\n                    'className': \"shooter\",\r\n                    'attacksFromADistance': true\r\n                }\r\n            )\r\n        }\r\n    }","import { enemyPrototypes } from './EnemyPrototypes';\r\n\r\nexport const initialState = {\r\n    boratPosition: {'x':'50', 'y':'90'},\r\n    GWBushPosition: {'x':'50', 'y':'50'},\r\n    enemies : [[{'id': 0, 'x': '5', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 1,'x': '25', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 2, 'x': '45', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 3,'x': '65', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"shooter\")},\r\n    {'id': 4,'x': '85', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"shooter\")},\r\n    {'id': 5, 'x': '5', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"heavy\")},\r\n    {'id': 6,'x': '25', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 7, 'x': '45', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 8,'x': '65', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"heavy\")},\r\n    {'id': 9,'x': '85', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")}],\r\n    [{'id': 0, 'x': '5', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 1,'x': '25', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 2, 'x': '45', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"heavy\")},\r\n    {'id': 3,'x': '65', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"shooter\")},\r\n    {'id': 4,'x': '85', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 5, 'x': '5', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"fast\")},\r\n    {'id': 6,'x': '25', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"shooter\")},\r\n    {'id': 7, 'x': '45', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"fast\")},\r\n    {'id': 8,'x': '65', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 9,'x': '85', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")}],\r\n    [{'id': 0, 'x': '5', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"heavy\")},\r\n    {'id': 1,'x': '25', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 2, 'x': '45', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 3,'x': '65', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 4,'x': '85', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"shooter\")},\r\n    {'id': 5, 'x': '5', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"fast\")},\r\n    {'id': 6,'x': '25', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 7, 'x': '45', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 8,'x': '65', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"shooter\")},\r\n    {'id': 9,'x': '85', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")}],\r\n    [{'id': 0, 'x': '5', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 1,'x': '25', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"shooter\")},\r\n    {'id': 2, 'x': '45', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 3,'x': '65', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 4,'x': '85', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"heavy\")},\r\n    {'id': 5, 'x': '5', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 6,'x': '25', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 7, 'x': '45', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 8,'x': '65', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 9,'x': '85', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"fast\")}],\r\n    [{'id': 0, 'x': '5', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"fast\")},\r\n    {'id': 1,'x': '25', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"fast\")},\r\n    {'id': 2, 'x': '45', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"shooter\")},\r\n    {'id': 3,'x': '65', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"shooter\")},\r\n    {'id': 4,'x': '85', 'y':'10', \"dead\": false, \"enemyType\" : enemyPrototypes(\"shooter\")},\r\n    {'id': 5, 'x': '5', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"shooter\")},\r\n    {'id': 6,'x': '25', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 7, 'x': '45', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 8,'x': '65', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"regular\")},\r\n    {'id': 9,'x': '85', 'y':'20', \"dead\": false, \"enemyType\" : enemyPrototypes(\"heavy\")}]],\r\n    projectiles :[],\r\n    lifeCount: 3,\r\n    killCount: 0,\r\n    waveCount: 0,\r\n    gameStarted: false\r\n}\r\n","import { createStore } from 'redux'\r\nimport AppReducer from \"./AppReducer\"\r\n\r\n//Creating the store\r\nlet store = createStore(AppReducer);\r\n//chacking initial value\r\nconsole.log('Initial state: ', store.getState());\r\n\r\nexport default store","import produce from 'immer';\r\nimport { initialState } from '../js/Constants';\r\n\r\n\r\n   // Use the initialState as a default value\r\n   export default function AppReducer(state = initialState, action) {\r\n     // The reducer normally looks at the action type field to decide what happens  \r\n     switch (action.type) {  \r\n         case 'borat/putXPosition' : {\r\n           return {\r\n                ...state,\r\n                    boratPosition: {'x':action.payload, 'y': state.boratPosition.y}\r\n            }\r\n        }\r\n        case 'borat/putYPosition' : {\r\n          return {\r\n               ...state,\r\n                   boratPosition: {'x':state.boratPosition.x, 'y': action.payload}\r\n           }\r\n       }\r\n       case 'lifeCount/decrease' : {\r\n        return {\r\n             ...state,\r\n                 lifeCount: state.lifeCount -1\r\n         }\r\n     }\r\n     case 'killCount/add' : {\r\n        return {\r\n             ...state,\r\n                 killCount: state.killCount + action.payload\r\n         }\r\n     }\r\n     case 'enemy/descend' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.enemies[action.payload.waveNumber][action.payload.id].y = action.payload.position;\r\n        })   \r\n    }\r\n    case 'projectile/elevate' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.projectiles[action.payload.id].y = action.payload.positionY;\r\n        })   \r\n    }\r\n    \r\n    case 'projectile/spawn' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            console.log(draft.projectiles.length)\r\n            draft.projectiles.push({'id': draft.projectiles.length, 'x' : action.payload.positionX.toString(), 'y' : action.payload.positionY.toString() , 'dead' : false, 'type' : action.payload.type, timeOfDeath: null })\r\n        })\r\n    }\r\n    case 'enemy/setDead' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.enemies[action.payload.waveNumber][action.payload.id].dead = action.payload.dead;\r\n        })   \r\n    }\r\n    case 'enemy/decreaseHealth' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.enemies[action.payload.waveNumber][action.payload.id].enemyType.health = draft.enemies[action.payload.waveNumber][action.payload.id].enemyType.health - action.payload.amount;\r\n        })   \r\n    }\r\n    case 'projectile/setDead' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.projectiles[action.payload.id].dead = action.payload.dead;\r\n        })   \r\n    }\r\n    case 'projectile/setTimeOfDeath' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.projectiles[action.payload.id].timeOfDeath = action.payload.timeOfDeath\r\n\r\n        })   \r\n    }\r\n    case 'gameStarted/setValue' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.gameStarted = action.payload\r\n\r\n        })   \r\n    }\r\n    case 'wave/add' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.waveCount = draft.waveCount + action.payload\r\n\r\n        })   \r\n    }\r\n\r\n       default:      \r\n       // If this reducer doesn't recognize the action type, or doesn't      \r\n       // care about this specific action, return the existing state unchanged \r\n       return state \r\n   }}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport store from './components/Store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}