{"version":3,"sources":["components/Projectile.jsx","components/MovingItem.jsx","components/Enemy.jsx","components/LifeCounter.jsx","components/KillCounter.jsx","components/App.js","components/AppReducer.jsx","components/Store.js","index.js"],"names":["Projectile","props","dispatch","useDispatch","currentProjectile","useSelector","state","projectiles","find","projectile","id","inputRef","useRef","useEffect","dead","current","className","type","payload","y","setTimeout","parseInt","toString","style","top","left","x","ref","MovingItem","focus","storePosition","boratPosition","tabIndex","onKeyDown","e","key","preventDefault","Enemy","currentEnemy","enemies","storeProjectiles","isItDead","length","slice","map","Math","abs","LifeCounter","storeLifeCount","lifeCount","class","KillCounter","storeKillCount","killCount","App","reactElementArrayEnemies","enemy","reactElementArrayProjectiles","initialState","GWBushPosition","store","createStore","action","produce","draft","position","console","log","push","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42fa91f4.chunk.js","sourcesContent":["import '../styles/projectile.scss'\r\n\r\n//Importing useSelector hook to be able to \"listen\" to the Redux store\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { useEffect } from 'react'\r\nimport {useState} from 'react'\r\nimport {useRef} from 'react'\r\n\r\n\r\nconst Projectile= (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const storeProjectile = state => state.projectiles.find(projectile => projectile.id == props.id);\r\n    const currentProjectile = useSelector(storeProjectile)\r\n\r\n    //Creating the reference we'll assign to the square.\r\n    const inputRef = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n        if (currentProjectile.dead === true) {\r\n            inputRef.current.className = \"projectile projectile--dead\"\r\n            dispatch({ type: 'projectile/remove', payload: currentProjectile.id })\r\n        } else {\r\n            inputRef.current.className = \"projectile\"\r\n            if (currentProjectile.y >= -10) {\r\n                setTimeout(() => {\r\n                  dispatch({ type: 'projectile/elevate', payload: {'position': (parseInt(currentProjectile.y) - 1).toString(), 'id': props.id }})\r\n              }\r\n              , 50)\r\n              }\r\n            else {\r\n                dispatch({ type: 'projectile/setDead', payload: {'dead': true, 'id': currentProjectile.id }})\r\n            }    \r\n        }\r\n        \r\n    })\r\n      return (\r\n            <div className = \"projectile\" style = {{top:currentProjectile.y + \"vh\", left: currentProjectile.x + \"vh\"}} ref={inputRef}></div> \r\n      )\r\n    }\r\n\r\n   \r\nexport default Projectile","import '../styles/fancySquare.scss'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useRef, useEffect } from 'react';\r\nimport Projectile from './Projectile';\r\n\r\nconst MovingItem = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    //Creating the reference we'll assign to the square.\r\n    const inputRef = useRef();\r\n\r\n    //Adding behavior on render: give focus to the square.\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n      })\r\n\r\n    //Setting Hook on global state position for this object\r\n    const currentPosition = state => state.boratPosition;\r\n    const storePosition = useSelector(currentPosition)\r\n\r\n    //handling position changing scenarios in a function\r\n\r\n    const moveAround = (key) => {\r\n        if (key === \"ArrowDown\") {\r\n            if (storePosition.y <= 89) {\r\n                dispatch({ type: 'borat/putYPosition', payload: parseInt(storePosition.y)+1})\r\n            }\r\n        } else if ( key === \"ArrowUp\") {\r\n            if (storePosition.y >= 1) {\r\n                dispatch({ type: 'borat/putYPosition', payload: parseInt(storePosition.y)-1})\r\n                }\r\n        } else if ( key === \"ArrowLeft\") {\r\n            if (storePosition.x >= 1) {\r\n                dispatch({ type: 'borat/putXPosition', payload: parseInt(storePosition.x)-1})\r\n            }\r\n        } else if ( key === \"ArrowRight\") {\r\n            if (storePosition.x <= 89) {\r\n                dispatch({ type: 'borat/putXPosition', payload: parseInt(storePosition.x)+1})\r\n            }\r\n        } else if ( key === \" \") {\r\n                dispatch({ type: 'projectile/spawn', payload: parseInt(storePosition.x)})\r\n        }\r\n    }\r\n\r\n    /*storeProjectilePosition.map(projectile => {\r\n        return <Projectile id = {projectile.id} />\r\n    })*/\r\n\r\n    //Returning the square element   \r\n    return <div tabIndex = '0' className = \"fancy-square\" style = {{top:storePosition.y + \"vh\", left: storePosition.x + \"vh\"}} onKeyDown = { e => {\r\n            e.preventDefault();  \r\n            moveAround(e.key)\r\n    }}\r\n ref={inputRef}></div>\r\n}\r\nexport default MovingItem","import '../styles/gwBush.scss'\r\n\r\n//Importing useSelector hook to be able to \"listen\" to the Redux store\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { useEffect } from 'react'\r\nimport {useState} from 'react'\r\nimport {useRef} from 'react'\r\n\r\n\r\nconst Enemy = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const storeEnemy = state => state.enemies[props.id];\r\n    const currentEnemy = useSelector(storeEnemy)\r\n\r\n\r\n    //Setting Hook on global state position for the Projectiles\r\n    const currentProjectilesPositions = state => state.projectiles;\r\n    const storeProjectiles = useSelector(currentProjectilesPositions)\r\n\r\n\r\n    //Redux Hook\r\n    const storeIsItDead = state => state.enemies[props.id].dead;\r\n    const isItDead = useSelector(storeIsItDead)\r\n\r\n\r\n    //Creating the reference we'll assign to the square.\r\n    const inputRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (isItDead === true) {\r\n            inputRef.current.className = \"gwbush gwbush--dead\"\r\n            dispatch({ type: 'enemy/descend', payload: {'position': -10, 'id': props.id }})\r\n        } else {\r\n        //Checking if the coordinates match to define the right styling\r\n        if (storeProjectiles.length > 0) {\r\n        storeProjectiles.slice(-10).map(projectile => {\r\n            if (projectile.dead === false && (Math.abs(projectile.x - currentEnemy.x) <=5) && (Math.abs(projectile.y - currentEnemy.y)<=5)) {\r\n                dispatch({ type: 'killCount/increase', payload: null})\r\n                dispatch({ type: 'projectile/setDead', payload: {'dead': true, 'id': projectile.id }})\r\n                dispatch({ type: 'enemy/setDead', payload: {'dead': true, 'id': props.id }})\r\n                /*setHaveBeenKilled(true)    */        \r\n            } else {\r\n                inputRef.current.className = \"gwbush\"\r\n            }\r\n        })\r\n        }\r\n        if (currentEnemy.y < 110) {\r\n            setTimeout(() => {\r\n              dispatch({ type: 'enemy/descend', payload: {'position': (parseInt(currentEnemy.y) + 1).toString(), 'id': props.id }})\r\n          }\r\n          , 300)\r\n        }\r\n      }\r\n    })\r\n      return (\r\n            <div className = \"gwbush\" style = {{top:currentEnemy.y + \"vh\", left: currentEnemy.x + \"vh\"}} ref={inputRef}></div> \r\n      )\r\n    }\r\n\r\n   \r\nexport default Enemy","import '../styles/lifeCounter.scss'\r\nimport { useSelector } from \"react-redux\"\r\n\r\nconst LifeCounter = () => {\r\n\r\n        //Setting Hook on life counter\r\n        const lifeCount = state => state.lifeCount;\r\n        const storeLifeCount = useSelector(lifeCount)\r\n\r\n    \r\n    if (storeLifeCount > 0) {\r\n        return <div className = \"life-counter\">\r\n            <i class=\"fas fa-heart life-counter__icon\"></i>\r\n            <div className = \"life-counter__value\">{storeLifeCount}</div>\r\n        </div>\r\n    } else {\r\n        return <div className = \"life-counter\">Game Over Man!</div>\r\n    }\r\n}\r\nexport default LifeCounter","import '../styles/lifeCounter.scss'\r\nimport { useSelector } from \"react-redux\"\r\n\r\nconst KillCounter = () => {\r\n\r\n        //Setting Hook on life counter\r\n        const killCount = state => state.killCount;\r\n        const storeKillCount = useSelector(killCount)\r\n\r\n    \r\n    if (storeKillCount < 10) {\r\n        return <div className = \"life-counter\">\r\n            <i class=\"fas fa-skull life-counter__icon\"></i>\r\n            <div className = \"life-counter__value\">{storeKillCount}</div>\r\n        </div>\r\n    } else {\r\n        return <div className = \"life-counter\">They are all dead!</div>\r\n    }\r\n}\r\nexport default KillCounter","import React from 'react';\nimport '../styles/App.css';\nimport '../styles/base.scss';\nimport MovingItem from './MovingItem';\nimport Enemy from './Enemy';\nimport LifeCounter from './LifeCounter';\nimport { useSelector } from 'react-redux';\nimport Projectile from './Projectile';\nimport KillCounter from './KillCounter';\n\nfunction App() {\n\n  const storeEnemies = state => state.enemies;\n  const enemies = useSelector(storeEnemies)\n\n  const storeProjectiles = state => state.projectiles;\n  const projectiles = useSelector(storeProjectiles)\n\n  const reactElementArrayEnemies = enemies.map(enemy => {\n    return <Enemy id = {enemy.id}/>\n  })\n\n  const reactElementArrayProjectiles = projectiles.slice(-10).map(projectile => {\n    return <Projectile id = {projectile.id}/>\n  })\n\n  return(    \n    <div className = \"grid\" >\n      <MovingItem/>\n          {reactElementArrayEnemies}\n          {reactElementArrayProjectiles}\n      <div className = \"counters\">\n        <LifeCounter/>\n        <KillCounter/>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import update from 'immutability-helper';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport produce from 'immer';\r\n\r\n\r\n\r\nconst initialState = {\r\n    boratPosition: {'x':'50', 'y':'90'},\r\n    GWBushPosition: {'x':'50', 'y':'50'},\r\n    enemies : [{'id': 0, 'x': '5', 'y':'10', \"dead\": false},\r\n                {'id': 1,'x': '25', 'y':'10', \"dead\": false},\r\n                {'id': 2, 'x': '45', 'y':'10', \"dead\": false},\r\n                {'id': 3,'x': '65', 'y':'10', \"dead\": false},\r\n                {'id': 4,'x': '85', 'y':'10', \"dead\": false},\r\n                {'id': 5, 'x': '5', 'y':'20', \"dead\": false},\r\n                {'id': 6,'x': '25', 'y':'20', \"dead\": false},\r\n                {'id': 7, 'x': '45', 'y':'20', \"dead\": false},\r\n                {'id': 8,'x': '65', 'y':'20', \"dead\": false},\r\n                {'id': 9,'x': '85', 'y':'20', \"dead\": false}],\r\n    projectiles :[],\r\n    lifeCount: 10,\r\n    killCount: 0\r\n}\r\n   // Use the initialState as a default value\r\n   export default function AppReducer(state = initialState, action) {\r\n     // The reducer normally looks at the action type field to decide what happens  \r\n     switch (action.type) {  \r\n         case 'borat/putXPosition' : {\r\n           return {\r\n                ...state,\r\n                    boratPosition: {'x':action.payload, 'y': state.boratPosition.y}\r\n            }\r\n        }\r\n        case 'borat/putYPosition' : {\r\n          return {\r\n               ...state,\r\n                   boratPosition: {'x':state.boratPosition.x, 'y': action.payload}\r\n           }\r\n       }\r\n       case 'lifeCount/decrease' : {\r\n        return {\r\n             ...state,\r\n                 lifeCount: state.lifeCount -1\r\n         }\r\n     }\r\n     case 'killCount/increase' : {\r\n        return {\r\n             ...state,\r\n                 killCount: state.killCount +1\r\n         }\r\n     }\r\n     case 'enemy/descend' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.enemies[action.payload.id].y = action.payload.position;\r\n        })   \r\n    }\r\n    case 'projectile/elevate' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.projectiles[action.payload.id].y = action.payload.position;\r\n        })   \r\n    }\r\n    case 'projectile/spawn' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            console.log(draft.projectiles.length)\r\n            draft.projectiles.push({'id': draft.projectiles.length, 'x' : action.payload.toString(), 'y' : \"90\", 'dead' : false })\r\n        })\r\n    }\r\n    case 'enemy/setDead' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.enemies[action.payload.id].dead = action.payload.dead;\r\n            draft.enemies[action.payload.id].x = \"0\"\r\n            draft.enemies[action.payload.id].y = \"0\"\r\n        })   \r\n    }\r\n    case 'projectile/setDead' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.projectiles[action.payload.id].dead = action.payload.dead;\r\n        })   \r\n    }\r\n    case 'projectile/remove' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            /*draft.projectiles.splice(action.payload, 1)*/\r\n\r\n        })   \r\n    }\r\n\r\n       default:      \r\n       // If this reducer doesn't recognize the action type, or doesn't      \r\n       // care about this specific action, return the existing state unchanged \r\n       return state \r\n   }}","import { createStore } from 'redux'\r\nimport AppReducer from \"./AppReducer\"\r\n\r\n//Creating the store\r\nlet store = createStore(AppReducer);\r\n//chacking initial value\r\nconsole.log('Initial state: ', store.getState());\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport store from './components/Store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}