{"version":3,"sources":["components/Projectile.jsx","components/MovingItem.jsx","components/Enemy.jsx","components/LifeCounter.jsx","components/KillCounter.jsx","components/App.js","components/AppReducer.jsx","components/Store.js","index.js"],"names":["Projectile","props","dispatch","useDispatch","positionX","useSelector","state","projectiles","id","x","positionY","y","storeEnemiesPosition","enemies","useState","haveBeenKilled","setHaveBeenKilled","inputRef","useRef","useEffect","map","enemy","dead","current","className","Math","abs","setTimeout","type","payload","parseInt","toString","style","top","left","ref","MovingItem","focus","storePosition","boratPosition","tabIndex","onKeyDown","e","key","preventDefault","Enemy","storeProjectilePosition","isItDead","projectile","LifeCounter","storeLifeCount","lifeCount","class","KillCounter","storeKillCount","killCount","App","reactElementArrayEnemies","reactElementArrayProjectiles","initialState","GWBushPosition","store","createStore","action","produce","draft","position","console","log","length","push","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77747ee9.chunk.js","sourcesContent":["import '../styles/projectile.scss'\r\n\r\n//Importing useSelector hook to be able to \"listen\" to the Redux store\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { useEffect } from 'react'\r\nimport {useState} from 'react'\r\nimport {useRef} from 'react'\r\n\r\n\r\nconst Projectile= (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //Redux Hook\r\n    const storePositionX = state => state.projectiles[props.id].x;\r\n    const positionX = useSelector(storePositionX)\r\n    \r\n    //Redux Hook\r\n    const storePositionY = state => state.projectiles[props.id].y;\r\n    const positionY = useSelector(storePositionY)\r\n\r\n    //Setting Hook on global state position for the enemies\r\n    const currentEnemiesPositions = state => state.enemies;\r\n    const storeEnemiesPosition = useSelector(currentEnemiesPositions)\r\n\r\n    //Setting up Hook for havBeenKilledFlag\r\n    const [haveBeenKilled, setHaveBeenKilled] = useState(false);\r\n\r\n    //Creating the reference we'll assign to the square.\r\n    const inputRef = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        storeEnemiesPosition.map(enemy => {\r\n\r\n        if (enemy.dead === false) {\r\n        \r\n        if (haveBeenKilled) {\r\n            inputRef.current.className = \"projectile projectile--dead\"\r\n\r\n            \r\n        } else {\r\n        //Checking if the coordinates match to define the right styling\r\n\r\n        if ((Math.abs(enemy.x - positionX) <=5) && (Math.abs(enemy.y - positionY)<=5)) {\r\n            setHaveBeenKilled(true)  \r\n        } else {\r\n            inputRef.current.className = \"projectile\"\r\n        }\r\n        if (positionY < 100) {\r\n            setTimeout(() => {\r\n              dispatch({ type: 'projectile/elevate', payload: {'position': (parseInt(positionY) - 2).toString(), 'id': props.id }})\r\n          }\r\n          , 50)\r\n          }\r\n      }\r\n    }\r\n    })\r\n    \r\n    \r\n    \r\n    \r\n    })\r\n      return (\r\n            <div className = \"projectile\" style = {{top:positionY + \"vh\", left: positionX + \"vh\"}} ref={inputRef}></div> \r\n      )\r\n    }\r\n\r\n   \r\nexport default Projectile","import '../styles/fancySquare.scss'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useRef, useEffect } from 'react';\r\nimport Projectile from './Projectile';\r\n\r\nconst MovingItem = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    //Creating the reference we'll assign to the square.\r\n    const inputRef = useRef();\r\n\r\n    //Adding behavior on render: give focus to the square.\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n      })\r\n\r\n    //Setting Hook on global state position for this object\r\n    const currentPosition = state => state.boratPosition;\r\n    const storePosition = useSelector(currentPosition)\r\n\r\n    //Setting Hook on global state position for the Projectiles\r\n    const currentProjectilesPositions = state => state.projectiles;\r\n    const storeProjectilePosition = useSelector(currentProjectilesPositions)\r\n\r\n    //handling position changing scenarios in a function\r\n\r\n    const moveAround = (key) => {\r\n        if (key === \"ArrowDown\") {\r\n            if (storePosition.y <= 89) {\r\n                dispatch({ type: 'borat/putYPosition', payload: parseInt(storePosition.y)+1})\r\n            }\r\n        } else if ( key === \"ArrowUp\") {\r\n            if (storePosition.y >= 1) {\r\n                dispatch({ type: 'borat/putYPosition', payload: parseInt(storePosition.y)-1})\r\n                }\r\n        } else if ( key === \"ArrowLeft\") {\r\n            if (storePosition.x >= 1) {\r\n                dispatch({ type: 'borat/putXPosition', payload: parseInt(storePosition.x)-1})\r\n            }\r\n        } else if ( key === \"ArrowRight\") {\r\n            if (storePosition.x <= 89) {\r\n                dispatch({ type: 'borat/putXPosition', payload: parseInt(storePosition.x)+1})\r\n            }\r\n        } else if ( key === \" \") {\r\n                dispatch({ type: 'projectile/spawn', payload: parseInt(storePosition.x)})\r\n        }\r\n    }\r\n\r\n    /*storeProjectilePosition.map(projectile => {\r\n        return <Projectile id = {projectile.id} />\r\n    })*/\r\n\r\n    //Returning the square element   \r\n    return <div tabIndex = '0' className = \"fancy-square\" style = {{top:storePosition.y + \"vh\", left: storePosition.x + \"vh\"}} onKeyDown = { e => {\r\n            e.preventDefault();  \r\n            moveAround(e.key)\r\n    }} ref={inputRef}></div>\r\n}\r\nexport default MovingItem","import '../styles/gwBush.scss'\r\n\r\n//Importing useSelector hook to be able to \"listen\" to the Redux store\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { useEffect } from 'react'\r\nimport {useState} from 'react'\r\nimport {useRef} from 'react'\r\n\r\n\r\nconst Enemy = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //Redux Hook\r\n    const storePositionX = state => state.enemies[props.id].x;\r\n    const positionX = useSelector(storePositionX)\r\n\r\n    //Redux Hook\r\n    const storePositionY = state => state.enemies[props.id].y;\r\n    const positionY = useSelector(storePositionY)\r\n\r\n    /*//Setting Hook on global state position for the MovingObject\r\n    const currentMovingObjectPosition = state => state.boratPosition;\r\n    const storeMovingObjectPosition = useSelector(currentMovingObjectPosition)*/\r\n\r\n    //Setting Hook on global state position for the Projectiles\r\n    const currentProjectilesPositions = state => state.projectiles;\r\n    const storeProjectilePosition = useSelector(currentProjectilesPositions)\r\n\r\n    //Setting up Hook for havBeenKilledFlag\r\n    const [haveBeenKilled, setHaveBeenKilled] = useState(false);\r\n\r\n    //Redux Hook\r\n    const storeIsItDead = state => state.enemies[props.id].dead;\r\n    const isItDead = useSelector(storeIsItDead)\r\n\r\n    //Creating the reference we'll assign to the square.\r\n    const inputRef = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n        \r\n        \r\n        if (isItDead === true) {\r\n            inputRef.current.className = \"gwbush gwbush--dead\"\r\n            dispatch({ type: 'enemy/descend', payload: {'position': -10, 'id': props.id }})\r\n        } else {\r\n        //Checking if the coordinates match to define the right styling\r\n        storeProjectilePosition.map(projectile => {\r\n            if ((Math.abs(projectile.x - positionX) <=5) && (Math.abs(projectile.y - positionY)<=5)) {\r\n                dispatch({ type: 'killCount/increase', payload: null})\r\n                dispatch({ type: 'enemy/setDead', payload: {'dead': true, 'id': props.id }})\r\n                /*setHaveBeenKilled(true)    */        \r\n            } else {\r\n                inputRef.current.className = \"gwbush\"\r\n            }\r\n        })\r\n\r\n        if (positionY < 100) {\r\n            setTimeout(() => {\r\n              dispatch({ type: 'enemy/descend', payload: {'position': (parseInt(positionY) + 2).toString(), 'id': props.id }})\r\n          }\r\n          , 500)\r\n        }\r\n      }\r\n    })\r\n      return (\r\n            <div className = \"gwbush\" style = {{top:positionY + \"vh\", left: positionX + \"vh\"}} ref={inputRef}></div> \r\n      )\r\n    }\r\n\r\n   \r\nexport default Enemy","import '../styles/lifeCounter.scss'\r\nimport { useSelector } from \"react-redux\"\r\n\r\nconst LifeCounter = () => {\r\n\r\n        //Setting Hook on life counter\r\n        const lifeCount = state => state.lifeCount;\r\n        const storeLifeCount = useSelector(lifeCount)\r\n\r\n    \r\n    if (storeLifeCount > 0) {\r\n        return <div className = \"life-counter\">\r\n            <i class=\"fas fa-heart life-counter__icon\"></i>\r\n            <div className = \"life-counter__value\">{storeLifeCount}</div>\r\n        </div>\r\n    } else {\r\n        return <div className = \"life-counter\">Game Over Man!</div>\r\n    }\r\n}\r\nexport default LifeCounter","import '../styles/lifeCounter.scss'\r\nimport { useSelector } from \"react-redux\"\r\n\r\nconst KillCounter = () => {\r\n\r\n        //Setting Hook on life counter\r\n        const killCount = state => state.killCount;\r\n        const storeKillCount = useSelector(killCount)\r\n\r\n    \r\n    if (storeKillCount < 10) {\r\n        return <div className = \"life-counter\">\r\n            <i class=\"fas fa-skull\"></i>\r\n            <div className = \"life-counter__value\">{storeKillCount}</div>\r\n        </div>\r\n    } else {\r\n        return <div className = \"life-counter\">They are all dead!</div>\r\n    }\r\n}\r\nexport default KillCounter","import React from 'react';\nimport '../styles/App.css';\nimport '../styles/base.scss';\nimport MovingItem from './MovingItem';\nimport Enemy from './Enemy';\nimport LifeCounter from './LifeCounter';\nimport { useSelector } from 'react-redux';\nimport Projectile from './Projectile';\nimport KillCounter from './KillCounter';\n\nfunction App() {\n\n  const storeEnemies = state => state.enemies;\n  const enemies = useSelector(storeEnemies)\n\n  const storeProjectiles = state => state.projectiles;\n  const projectiles = useSelector(storeProjectiles)\n\n  const storeEnemy = state => state.enemy;\n  const enemy = useSelector(storeEnemy)\n\n  const reactElementArrayEnemies = enemies.map(enemy => {\n    return <Enemy id = {enemy.id}/>\n  })\n\n  const reactElementArrayProjectiles = projectiles.map(projectile => {\n    return <Projectile id = {projectile.id}/>\n  })\n\n  return(    \n    \n    <div className = \"grid\" >\n      <MovingItem/>\n\n          {reactElementArrayEnemies}\n          {reactElementArrayProjectiles}\n\n      <div className = \"counters\">\n        <LifeCounter/>\n        <KillCounter/>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import update from 'immutability-helper';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport produce from 'immer';\r\n\r\n\r\n\r\nconst initialState = {\r\n    boratPosition: {'x':'50', 'y':'90'},\r\n    GWBushPosition: {'x':'50', 'y':'50'},\r\n    enemies : [ {'id': 0, 'x': '5', 'y':'10', \"dead\": false},\r\n                {'id': 1,'x': '25', 'y':'10', \"dead\": false},\r\n                {'id': 2, 'x': '45', 'y':'10', \"dead\": false},\r\n                {'id': 3,'x': '65', 'y':'10', \"dead\": false},\r\n                {'id': 4,'x': '85', 'y':'10', \"dead\": false},\r\n                {'id': 5, 'x': '5', 'y':'25', \"dead\": false},\r\n                {'id': 6,'x': '25', 'y':'25', \"dead\": false},\r\n                {'id': 7, 'x': '45', 'y':'25', \"dead\": false},\r\n                {'id': 8,'x': '65', 'y':'25', \"dead\": false},\r\n                {'id': 9,'x': '85', 'y':'25', \"dead\": false}],\r\n    projectiles :[],\r\n    lifeCount: 10,\r\n    killCount: 0\r\n}\r\n   // Use the initialState as a default value\r\n   export default function AppReducer(state = initialState, action) {\r\n     // The reducer normally looks at the action type field to decide what happens  \r\n     switch (action.type) {  \r\n         case 'borat/putXPosition' : {\r\n           return {\r\n                ...state,\r\n                    boratPosition: {'x':action.payload, 'y': state.boratPosition.y}\r\n            }\r\n        }\r\n        case 'borat/putYPosition' : {\r\n          return {\r\n               ...state,\r\n                   boratPosition: {'x':state.boratPosition.x, 'y': action.payload}\r\n           }\r\n       }\r\n       case 'lifeCount/decrease' : {\r\n        return {\r\n             ...state,\r\n                 lifeCount: state.lifeCount -1\r\n         }\r\n     }\r\n     case 'killCount/increase' : {\r\n        return {\r\n             ...state,\r\n                 killCount: state.killCount +1\r\n         }\r\n     }\r\n     case 'enemy/descend' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.enemies[action.payload.id].y = action.payload.position;\r\n        })   \r\n    }\r\n    case 'projectile/elevate' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.projectiles[action.payload.id].y = action.payload.position;\r\n        })   \r\n    }\r\n    case 'projectile/spawn' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            console.log(draft.projectiles.length)\r\n            draft.projectiles.push({'id': draft.projectiles.length, 'x' : action.payload, 'y' : \"90\" })\r\n        })   \r\n    }\r\n    case 'enemy/setDead' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.enemies[action.payload.id].dead = action.payload.dead;\r\n        })   \r\n    }\r\n    case 'projectile/remove' : {\r\n        return produce(state, draft => {\r\n            // Modify the draft however you want\r\n            draft.projectiles[action.payload].x = 110;\r\n        })   \r\n    }\r\n\r\n       default:      \r\n       // If this reducer doesn't recognize the action type, or doesn't      \r\n       // care about this specific action, return the existing state unchanged \r\n       return state \r\n   }}","import { createStore } from 'redux'\r\nimport AppReducer from \"./AppReducer\"\r\n\r\n//Creating the store\r\nlet store = createStore(AppReducer);\r\n//chacking initial value\r\nconsole.log('Initial state: ', store.getState());\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport store from './components/Store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}